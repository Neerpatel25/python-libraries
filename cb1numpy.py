# -*- coding: utf-8 -*-
"""CB1NUMPY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bU8eBJ9JL0iGz-8KXCxDX56yT684_giQ
"""

import numpy as np
a = np.array([1,2,3,4,5])
print(a)
print(a.shape)
print(type(a)) # denote which structure is used list of array etc..
print(a.dtype) # denote type of data in array

b=np.array([[1],[2],[3],[4],[5]])
print(b)
print(b.shape)

c=np.array([[1,2,3],[4,5,6]])
print(c)
print(c.shape)
print(c[1][1])

a=np.zeros((5,5))
print(a)

a=np.ones((5,5))
print(a)

c=np.full((5,5),7)
print(c)

c=np.eye((4))
print(c)

#Random matrix
randommatrix=np.random.random((2,3))
print(randommatrix)
print(randommatrix[:,2])#all rows but only 2nd col
#seting values
randommatrix[1,0:3]=1
print(randommatrix)

#set some rows and cols with constant value
z=np.zeros((3,3))
print(z)
z[1,:]=1 # first row and every columns =1
print(z)
z[:,-1]=7 #every row and last columns=7
print(z)

#setting datatype
z=np.zeros((3,3),dtype=np.int64)
print(z.dtype)

#Mathematical operations
x= np.array([[1,2],[3,4]])
y= np.array([[5,6],[7,8]])
print(x+y)
print(np.add(x,y))

print(x-y)
print(np.subtract(x,y))

print(x*y)
print(np.multiply(x,y))

print(x/y)
print(np.divide(x,y))

print(np.sqrt(x))

#Matrix Multiplication / dot product

print(np.dot(x,y))

print(x.dot(y))

#Multiplication of two vectors
a = np.array([1,2,3,4,5])
b=  np.array([1,2,3,4,5])
print(np.dot(a,b))

a=[1,2,3,4]
print(sum(a))
x=np.array([[1,2],[3,4]])
print(np.sum(x))
print(np.sum(x,axis=0)) # sum col wise
print(np.sum(x,axis=1)) # sum row wise

#stacking of array
a=np.array([1,2,3,4])
b= np.array([4,16,36,64])
print(np.stack((a,b),axis=0))#concate horizonatl
print(np.stack((a,b),axis=1))#concate verticcal

#Reshape a Numpy array
a=np.array([[1,2,3,4],[4,16,36,64]]) # 2 rows 4 colums
print(a)
a=a.reshape((4,2)) # reshape 4 rows 2 cols
print(a)
a=a.reshape((4,-1))
print(a)
a=a.reshape((-1,4))
print(a)

import numpy as np

a=np.array([1,2,3,4])
print(a)

a=np.arange(10)
print(a)

a=np.arange(10)+5
print(a)

"""NUMPY RANDOM MODULE

"""

a=np.array([1,2,3,4,5])
np.random.shuffle(a)
print(a)

a=np.random.rand(2,3)
print(a)

a=np.random.randn(2,3) # in randn return values from standard normal distribution
print(a)

#random pick one element from array
ele=np.random.choice([1,4,2,5,6])
print(ele)

#pseduo random generate and repalce same random in each refresh
np.random.seed(1)
ele=np.random.choice([1,4,2,5,6])
print(ele)

"""**NUMPY MORE FUNCTIONS**"""

a= np.array([[1,2,3,4],[7,6,2,0]])
print(a)

print(np.min(a))
print(np.min(a,axis=0))
print(np.min(a,axis=1))

print(np.max(a))
print(np.max(a,axis=0))
print(np.max(a,axis=1))

#mean
b=np.array([1,2,3,4,5])
print(np.mean(b))
print(np.mean(a,axis=0))
print(np.mean(a,axis=1))

#median
c=np.array([1,5,4,2,0])
print(np.median(c))

#Mean Vs Average
print(np.mean(c))
w=np.array([1,2,3,4,5])
print(np.average(c,weights=w))

#standard devation
print(np.std(c))

#variance
print(np.var(c))